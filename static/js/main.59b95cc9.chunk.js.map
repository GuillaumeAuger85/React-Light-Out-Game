{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","inherits","createClass","key","value","evt","flipCellsAroundMe","coord","classes","isLit","react_default","a","createElement","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","nrows","chanceLightStartOn","createRow","row","i","Math","random","ncols","_this$props","_coord$split$map","split","map","Number","_coord$split$map2","slicedToArray","y","x","flipCell","victory","flat","indexOf","setState","_this2","table","r","idx","el","index","src_Cell_0","concat","BoardTitle","winMsg","defaultProps","App","apply","arguments","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59b95cc9.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  \n  handleClick(evt) {\n    this.props.flipCellsAroundMe(this.props.coord);\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartOn: 0.25\n  }\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    }\n    this.flipCellsAround = this.flipCellsAround.bind(this)\n  }\n  createBoard() {\n    const nrows = this.props.nrows\n    const chanceLightStartOn = this.props.chanceLightStartOn\n    function createRow() {\n      let row = [];\n      for (let i = 0; i < nrows; i++) {\n        row[i] = Math.random() < chanceLightStartOn\n      }\n      return row\n    }\n    let board = [];\n    for (let i = 0; i < this.props.ncols; i++) {\n      board[i] = createRow()\n    }\n    return board\n  }\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y, x)\n    flipCell(y + 1, x)\n    flipCell(y - 1, x)\n    flipCell(y, x + 1)\n    flipCell(y, x - 1)\n    let victory = false;\n    if (board.flat().indexOf(true) === -1) {\n      victory = true\n    }\n    this.setState({\n      board: board,\n      hasWon: victory\n    })\n  }\n\n  render() {\n    const table = <table className=\"Board\" >\n      <tbody>\n        {this.state.board.map((r, idx) => {\n          return <tr key={idx}>{r.map((el, index) => {\n            return <Cell isLit={el} flipCellsAroundMe={this.flipCellsAround} key={`${idx}-${index}`} coord={`${idx}-${index}`} />\n          })}</tr>\n        })}\n      </tbody>\n    </table>\n    const BoardTitle = <div className=\"Board-title\">\n      <div className=\"neon-orange\">Lights</div>\n      <div className=\"neon-blue\">Out</div>\n    </div>\n    const winMsg = <div className=\"Board-title\">\n      <div className=\"Winner\">\n        <span className=\"neon-orange\">YOU</span>\n        <span className=\"neon-blue\">WIN!!!</span>\n      </div>\n    </div>\n    return (\n      <div>\n        {this.state.hasWon ? '' : BoardTitle}\n        {this.state.hasWon ? winMsg : table}\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}